// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: menu.sql

package db

import (
	"context"
	"database/sql"
)

const createMenu = `-- name: CreateMenu :one
INSERT INTO menu (
  restaurant_id, name, description
) VALUES (
  $1, $2, $3
)
RETURNING id, restaurant_id, name, description, updated_at
`

type CreateMenuParams struct {
	RestaurantID int32          `json:"restaurantID"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
}

func (q *Queries) CreateMenu(ctx context.Context, arg CreateMenuParams) (Menu, error) {
	row := q.queryRow(ctx, q.createMenuStmt, createMenu, arg.RestaurantID, arg.Name, arg.Description)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.RestaurantID,
		&i.Name,
		&i.Description,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteMenu = `-- name: DeleteMenu :exec
DELETE FROM menu
WHERE id = $1
`

func (q *Queries) DeleteMenu(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteMenuStmt, deleteMenu, id)
	return err
}

const getMenu = `-- name: GetMenu :many
SELECT id, restaurant_id, name, description, updated_at FROM menu
WHERE restaurant_id = $1
`

func (q *Queries) GetMenu(ctx context.Context, restaurantID int32) ([]Menu, error) {
	rows, err := q.query(ctx, q.getMenuStmt, getMenu, restaurantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Menu
	for rows.Next() {
		var i Menu
		if err := rows.Scan(
			&i.ID,
			&i.RestaurantID,
			&i.Name,
			&i.Description,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
